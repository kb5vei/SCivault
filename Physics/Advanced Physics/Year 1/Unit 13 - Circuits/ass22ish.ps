%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123
%%CreationDate: Thu Feb 21 07:22:19 2013
%%Title: /home/kb5vei/Desktop/ass22ish.sch
%%Author: kb5vei
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7632 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
45300 51000 45300 40000 10 line
51100 51000 51100 41500 10 line
40000 45900 57000 45900 10 line
gsave
40800 49700 40800 49500 10 line
gsave
false true false false 161.777776 [(1) ] 270 40850 49550 144.444443 text
grestore
40800 48800 40800 49000 10 line
gsave
false false false false 161.777776 [(2) ] 270 40850 48950 144.444443 text
grestore
41000 49400 40600 49400 10 line
40900 49300 40700 49300 10 line
41000 49200 40600 49200 10 line
40900 49100 40700 49100 10 line
40800 49000 40800 49100 10 line
40800 49500 40800 49400 10 line
grestore
gsave
false false false false 202.222224 [(10 V) ] 270 41100 49400 180.555557 text
grestore
gsave
46200 49600 46200 49400 10 line
gsave
false true false false 161.777776 [(1) ] 270 46250 49450 144.444443 text
grestore
46200 48700 46200 48900 10 line
gsave
false false false false 161.777776 [(2) ] 270 46250 48850 144.444443 text
grestore
46400 49300 46000 49300 10 line
46300 49200 46100 49200 10 line
46400 49100 46000 49100 10 line
46300 49000 46100 49000 10 line
46200 48900 46200 49000 10 line
46200 49400 46200 49300 10 line
grestore
gsave
false false false false 202.222224 [(25 V) ] 270 46500 49300 180.555557 text
grestore
gsave
51800 49200 51800 49000 10 line
gsave
false true false false 161.777776 [(1) ] 270 51850 49050 144.444443 text
grestore
51800 48300 51800 48500 10 line
gsave
false false false false 161.777776 [(2) ] 270 51850 48450 144.444443 text
grestore
52000 48900 51600 48900 10 line
51900 48800 51700 48800 10 line
52000 48700 51600 48700 10 line
51900 48600 51700 48600 10 line
51800 48500 51800 48600 10 line
51800 49000 51800 48900 10 line
grestore
gsave
false false false false 202.222224 [(20 V) ] 270 52100 48900 180.555557 text
grestore
gsave
40600 43400 40600 43200 10 line
gsave
false true false false 161.777776 [(1) ] 270 40650 43250 144.444443 text
grestore
40600 42500 40600 42700 10 line
gsave
false false false false 161.777776 [(2) ] 270 40650 42650 144.444443 text
grestore
40800 43100 40400 43100 10 line
40700 43000 40500 43000 10 line
40800 42900 40400 42900 10 line
40700 42800 40500 42800 10 line
40600 42700 40600 42800 10 line
40600 43200 40600 43100 10 line
grestore
gsave
false false false false 202.222224 [(12 V) ] 270 40900 43100 180.555557 text
grestore
gsave
45900 43700 45900 43500 10 line
gsave
false true false false 161.777776 [(1) ] 270 45950 43550 144.444443 text
grestore
45900 42800 45900 43000 10 line
gsave
false false false false 161.777776 [(2) ] 270 45950 42950 144.444443 text
grestore
46100 43400 45700 43400 10 line
46000 43300 45800 43300 10 line
46100 43200 45700 43200 10 line
46000 43100 45800 43100 10 line
45900 43000 45900 43100 10 line
45900 43500 45900 43400 10 line
grestore
gsave
false false false false 202.222224 [(100 V) ] 270 46200 43400 180.555557 text
grestore
gsave
51600 44400 51600 44200 10 line
gsave
false true false false 161.777776 [(1) ] 270 51650 44250 144.444443 text
grestore
51600 43500 51600 43700 10 line
gsave
false false false false 161.777776 [(2) ] 270 51650 43650 144.444443 text
grestore
51800 44100 51400 44100 10 line
51700 44000 51500 44000 10 line
51800 43900 51400 43900 10 line
51700 43800 51500 43800 10 line
51600 43700 51600 43800 10 line
51600 44200 51600 44100 10 line
grestore
gsave
false false false false 202.222224 [(15 V) ] 270 51900 44100 180.555557 text
grestore
gsave
43700 49000 43500 49100 10 line
43500 49100 43700 49200 10 line
43700 49200 43500 49300 10 line
43500 49300 43700 49400 10 line
43700 49000 43500 48900 10 line
43500 48900 43600 48850 10 line
43600 48700 43600 48850 10 line
43600 49600 43600 49448 10 line
43700 49399 43600 49450 10 line
grestore
gsave
false false false false 202.222224 [(3 Ohms) ] 270 43800 49400 180.555557 text
grestore
gsave
49100 49600 48900 49700 10 line
48900 49700 49100 49800 10 line
49100 49800 48900 49900 10 line
48900 49900 49100 50000 10 line
49100 49600 48900 49500 10 line
48900 49500 49000 49450 10 line
49000 49300 49000 49450 10 line
49000 50200 49000 50048 10 line
49100 49999 49000 50050 10 line
grestore
gsave
false false false false 202.222224 [(10 Ohms) ] 270 49200 50000 180.555557 text
grestore
gsave
49100 48300 48900 48400 10 line
48900 48400 49100 48500 10 line
49100 48500 48900 48600 10 line
48900 48600 49100 48700 10 line
49100 48300 48900 48200 10 line
48900 48200 49000 48150 10 line
49000 48000 49000 48150 10 line
49000 48900 49000 48748 10 line
49100 48699 49000 48750 10 line
grestore
gsave
false false false false 202.222224 [(25 Ohms) ] 270 49200 48700 180.555557 text
grestore
gsave
55100 49800 54900 49900 10 line
54900 49900 55100 50000 10 line
55100 50000 54900 50100 10 line
54900 50100 55100 50200 10 line
55100 49800 54900 49700 10 line
54900 49700 55000 49650 10 line
55000 49500 55000 49650 10 line
55000 50400 55000 50248 10 line
55100 50199 55000 50250 10 line
grestore
gsave
false false false false 202.222224 [(4 Ohms) ] 270 55200 50200 180.555557 text
grestore
gsave
55100 48400 54900 48500 10 line
54900 48500 55100 48600 10 line
55100 48600 54900 48700 10 line
54900 48700 55100 48800 10 line
55100 48400 54900 48300 10 line
54900 48300 55000 48250 10 line
55000 48100 55000 48250 10 line
55000 49000 55000 48848 10 line
55100 48799 55000 48850 10 line
grestore
gsave
false false false false 202.222224 [(7 Ohms) ] 270 55200 48800 180.555557 text
grestore
gsave
55100 47000 54900 47100 10 line
54900 47100 55100 47200 10 line
55100 47200 54900 47300 10 line
54900 47300 55100 47400 10 line
55100 47000 54900 46900 10 line
54900 46900 55000 46850 10 line
55000 46700 55000 46850 10 line
55000 47600 55000 47448 10 line
55100 47399 55000 47450 10 line
grestore
gsave
false false false false 202.222224 [(12 Ohms) ] 270 55200 47400 180.555557 text
grestore
gsave
42400 42800 42200 42900 10 line
42200 42900 42400 43000 10 line
42400 43000 42200 43100 10 line
42200 43100 42400 43200 10 line
42400 42800 42200 42700 10 line
42200 42700 42300 42650 10 line
42300 42500 42300 42650 10 line
42300 43400 42300 43248 10 line
42400 43199 42300 43250 10 line
grestore
gsave
false false false false 202.222224 [(6 Ohms) ] 270 42500 43200 180.555557 text
grestore
gsave
43900 42800 43700 42900 10 line
43700 42900 43900 43000 10 line
43900 43000 43700 43100 10 line
43700 43100 43900 43200 10 line
43900 42800 43700 42700 10 line
43700 42700 43800 42650 10 line
43800 42500 43800 42650 10 line
43800 43400 43800 43248 10 line
43900 43199 43800 43250 10 line
grestore
gsave
false false false false 202.222224 [(3 Ohms) ] 270 44000 43200 180.555557 text
grestore
gsave
47400 43100 47200 43200 10 line
47200 43200 47400 43300 10 line
47400 43300 47200 43400 10 line
47200 43400 47400 43500 10 line
47400 43100 47200 43000 10 line
47200 43000 47300 42950 10 line
47300 42800 47300 42950 10 line
47300 43700 47300 43548 10 line
47400 43499 47300 43550 10 line
grestore
gsave
false false false false 202.222224 [(150 Ohms) ] 270 47500 43500 180.555557 text
grestore
gsave
48400 43100 48200 43200 10 line
48200 43200 48400 43300 10 line
48400 43300 48200 43400 10 line
48200 43400 48400 43500 10 line
48400 43100 48200 43000 10 line
48200 43000 48300 42950 10 line
48300 42800 48300 42950 10 line
48300 43700 48300 43548 10 line
48400 43499 48300 43550 10 line
grestore
gsave
false false false false 202.222224 [(300 Ohms) ] 270 48500 43500 180.555557 text
grestore
gsave
49600 43000 49400 43100 10 line
49400 43100 49600 43200 10 line
49600 43200 49400 43300 10 line
49400 43300 49600 43400 10 line
49600 43000 49400 42900 10 line
49400 42900 49500 42850 10 line
49500 42700 49500 42850 10 line
49500 43600 49500 43448 10 line
49600 43399 49500 43450 10 line
grestore
gsave
false false false false 202.222224 [(50 Ohms) ] 270 49700 43400 180.555557 text
grestore
gsave
52800 43800 52600 43900 10 line
52600 43900 52800 44000 10 line
52800 44000 52600 44100 10 line
52600 44100 52800 44200 10 line
52800 43800 52600 43700 10 line
52600 43700 52700 43650 10 line
52700 43500 52700 43650 10 line
52700 44400 52700 44248 10 line
52800 44199 52700 44250 10 line
grestore
gsave
false false false false 202.222224 [(12 Ohms) ] 270 52900 44200 180.555557 text
grestore
gsave
53700 43800 53500 43900 10 line
53500 43900 53700 44000 10 line
53700 44000 53500 44100 10 line
53500 44100 53700 44200 10 line
53700 43800 53500 43700 10 line
53500 43700 53600 43650 10 line
53600 43500 53600 43650 10 line
53600 44400 53600 44248 10 line
53700 44199 53600 44250 10 line
grestore
gsave
false false false false 202.222224 [(33 Ohms) ] 270 53800 44200 180.555557 text
grestore
gsave
54600 43800 54400 43900 10 line
54400 43900 54600 44000 10 line
54600 44000 54400 44100 10 line
54400 44100 54600 44200 10 line
54600 43800 54400 43700 10 line
54400 43700 54500 43650 10 line
54500 43500 54500 43650 10 line
54500 44400 54500 44248 10 line
54600 44199 54500 44250 10 line
grestore
gsave
false false false false 202.222224 [(47 Ohms) ] 270 54700 44200 180.555557 text
grestore
gsave
55400 43800 55200 43900 10 line
55200 43900 55400 44000 10 line
55400 44000 55200 44100 10 line
55200 44100 55400 44200 10 line
55400 43800 55200 43700 10 line
55200 43700 55300 43650 10 line
55300 43500 55300 43650 10 line
55300 44400 55300 44248 10 line
55400 44199 55300 44250 10 line
grestore
gsave
false false false false 202.222224 [(86 Ohms) ] 270 55500 44200 180.555557 text
grestore
gsave
56300 43800 56100 43900 10 line
56100 43900 56300 44000 10 line
56300 44000 56100 44100 10 line
56100 44100 56300 44200 10 line
56300 43800 56100 43700 10 line
56100 43700 56200 43650 10 line
56200 43500 56200 43650 10 line
56200 44400 56200 44248 10 line
56300 44199 56200 44250 10 line
grestore
gsave
false false false false 202.222224 [(47 Ohms) ] 270 56400 44200 180.555557 text
grestore
40800 49700 40800 50400 10 line
40800 50400 43600 50400 10 line
43600 50400 43600 49600 10 line
43600 48700 43600 47800 10 line
43600 47800 40800 47800 10 line
40800 48800 40800 47800 10 line
46200 49600 46200 50400 10 line
46200 50400 49000 50400 10 line
49000 49300 49000 48900 10 line
49000 47400 46200 47400 10 line
46200 47400 46200 48700 10 line
49000 47400 49000 48000 10 line
49000 50400 49000 50200 10 line
51800 49200 51800 50800 10 line
51800 50800 55000 50800 10 line
55000 50800 55000 50400 10 line
55000 49500 55000 49000 10 line
55000 47600 55000 48100 10 line
55000 46600 55000 46700 10 line
55000 46600 51800 46600 10 line
51800 46600 51800 48300 10 line
40600 43400 40600 44800 10 line
40600 44800 43800 44800 10 line
42300 44800 42300 43400 10 line
43800 44800 43800 43400 10 line
43800 42500 43800 41300 10 line
43800 41300 40600 41300 10 line
40600 41300 40600 42500 10 line
42300 41300 42300 42500 10 line
gsave
false false false false 202.222224 [(Assignment 22: Series and Parallel Circuits) ] 0 50200 40700 180.555557 text
grestore
45900 43700 45900 44900 10 line
45900 44900 49500 44900 10 line
47300 44900 47300 43700 10 line
48300 44900 48300 43700 10 line
49500 44900 49500 43600 10 line
49500 42700 49500 41700 10 line
49500 41700 45900 41700 10 line
45900 41700 45900 42800 10 line
47300 42800 47300 41700 10 line
48300 42800 48300 41700 10 line
51600 44400 51600 45100 10 line
51600 45100 56200 45100 10 line
56200 45100 56200 44400 10 line
55300 44400 55300 45100 10 line
54500 44400 54500 45100 10 line
53600 44400 53600 45100 10 line
52700 44400 52700 45100 10 line
56200 43500 56200 42600 10 line
56200 42600 51600 42600 10 line
51600 42600 51600 43500 10 line
52700 43500 52700 42600 10 line
53600 43500 53600 42600 10 line
54500 43500 54500 42600 10 line
55300 43500 55300 42600 10 line
40000 51000 40000 51500 10 line
40000 51500 45300 51500 10 line
45300 51500 45300 51000 10 line
gsave
false false false false 202.222224 [(Name:) ] 0 40100 51100 180.555557 text
grestore
newpath
42300 44800
25
0 360 arc
fill
newpath
42300 44800
25
0 360 arc
fill
newpath
42300 44800
25
0 360 arc
fill
newpath
42300 41300
25
0 360 arc
fill
newpath
42300 41300
25
0 360 arc
fill
newpath
42300 41300
25
0 360 arc
fill
newpath
47300 44900
25
0 360 arc
fill
newpath
48300 44900
25
0 360 arc
fill
newpath
47300 44900
25
0 360 arc
fill
newpath
47300 44900
25
0 360 arc
fill
newpath
48300 44900
25
0 360 arc
fill
newpath
48300 44900
25
0 360 arc
fill
newpath
47300 41700
25
0 360 arc
fill
newpath
48300 41700
25
0 360 arc
fill
newpath
47300 41700
25
0 360 arc
fill
newpath
47300 41700
25
0 360 arc
fill
newpath
48300 41700
25
0 360 arc
fill
newpath
48300 41700
25
0 360 arc
fill
newpath
55300 45100
25
0 360 arc
fill
newpath
54500 45100
25
0 360 arc
fill
newpath
53600 45100
25
0 360 arc
fill
newpath
52700 45100
25
0 360 arc
fill
newpath
55300 45100
25
0 360 arc
fill
newpath
55300 45100
25
0 360 arc
fill
newpath
54500 45100
25
0 360 arc
fill
newpath
54500 45100
25
0 360 arc
fill
newpath
53600 45100
25
0 360 arc
fill
newpath
53600 45100
25
0 360 arc
fill
newpath
52700 45100
25
0 360 arc
fill
newpath
52700 45100
25
0 360 arc
fill
newpath
52700 42600
25
0 360 arc
fill
newpath
53600 42600
25
0 360 arc
fill
newpath
54500 42600
25
0 360 arc
fill
newpath
55300 42600
25
0 360 arc
fill
newpath
52700 42600
25
0 360 arc
fill
newpath
52700 42600
25
0 360 arc
fill
newpath
53600 42600
25
0 360 arc
fill
newpath
53600 42600
25
0 360 arc
fill
newpath
54500 42600
25
0 360 arc
fill
newpath
54500 42600
25
0 360 arc
fill
newpath
55300 42600
25
0 360 arc
fill
newpath
55300 42600
25
0 360 arc
fill
showpage
%%End
